#version 430

in vec3 origin, direction;
out vec4 outputColor;

struct Material
{
	vec3 ambient;
	vec3 diffuse;
	vec3 reflection;
	vec3 specular;
	vec3 transparency;
	vec3 emission;
	vec3 atenuation;
	float refractionCoef;
	float shiness;
};

struct Sphere
{
	vec3 position;
	float radius;
	//vec3 color;
	Material material;
	int objectid;
};

struct Ray
{
	vec3 origin;
	vec3 direction;
	int type;
};

struct RayNode
{
	Ray ray;
	//vec3 color;
	vec3 reflectionColor;
	vec3 refractionColor;
	vec3 diffuseColor;
	vec3 specular;
	vec3 reflection;
	vec3 refraction;
	int parentIndex;
	int depth;
};

struct HitInfo
{
	bool hitDetected;
    vec3 hitPoint;
    vec3 surfaceNormal;
    float distance;
	//vec3 color;
	Material material;
	int objectid;            //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	int objectType;
};

const int Max_Depth = 5;
const int Max_Nodes = 64;
RayNode rayNode[Max_Nodes];
const int sphereCount = 3;
Sphere spheres[sphereCount];
const int TYPE_DIFFUSE = 1;
const int TYPE_SHADOW = 2;
const int TYPE_REFLECTION = 3;
const int TYPE_TRANSPARENCY = 4;
public const int TYPE_SPHERE = 0;
public const int TYPE_TRIANGLE = 1;

void sphereIntersect(Ray ray, Sphere sphere, inout HitInfo hitInfo)
{
	vec3 trackToSphere = ray.origin - sphere.position;
    float a = dot(ray.direction, ray.direction);
    float b = 2 * dot(trackToSphere, ray.direction);
    float c = dot(trackToSphere, trackToSphere) - sphere.radius * sphere.radius;
    float discriminant = b * b - 4.0 * a * c;

	if(discriminant > 0)
	{
		float distance = (-b - sqrt(discriminant)) / (2.0 * a);
		if(distance > 0.0001 && (distance < hitInfo.distance && hitInfo.hitDetected || !hitInfo.hitDetected))
		{
			hitInfo.distance = distance;
			hitInfo.hitPoint = ray.origin + ray.direction *  hitInfo.distance;
  			hitInfo.surfaceNormal = normalize(hitInfo.hitPoint - sphere.position);
			hitInfo.hitDetected = true;
			//hitInfo.color = sphere.color;
			hitInfo.material = sphere.material;
			hitInfo.objectid = sphere.objectid;
			hitInfo.objectType = TYPE_SPHERE;
		}
	}
}

bool isShadowed(vec3 hitPoint, int lightIndex, int lightType, inout vec3 transparency)
{
	HitInfo hitInfoLight;
	hitInfoLight.hitDetected = false;
	Ray ray;

	if(lightType == TYPE_SPHERE)
	{
		Sphere light = spheres[lightIndex]; //?????????????????????????
		vec3 eps = normalize(light.position - hitPoint) * 0.01;
		ray = Ray(hitPoint + eps, normalize(light.position - hitPoint), TYPE_SHADOW);
		sphereIntersect(ray, spheres[lightIndex], hitInfoLight); //???????????????????
	}
	if(lightType == TYPE_TRIANGLE)
	{
		//triangles
	}

	float distance = hitInfoLight.distance;

	HitInfo hitInfo;
	transparency = vec3(1.0);
	for(int i = 0; i < sphereCount; i++)
	{
		hitInfo.hitDetected = false;
		Material material;
		int type, index;

		if(i < sphereCount)
		{
			index = i;
			material = spheres[index].material;
			type = TYPE_SPHERE;
			sphereIntersect(ray, spheres[index], hitInfo);
		}
		else
		{
			//triangle
		}

		if((lightIndex != index || lightType != type) && hitInfo.hitDetected && hitInfo.distance < distance)
		{
			if(length(material.transparency) > 0)
			{
				transparency *= material.transparency;
				continue;
			}

			transparency = vec3(0.0);
			return true;
		}
	}
	return false;
}

vec3 phongShading(Material material, Material lightMaterial, vec3 hitPoint, vec3 surfaceNormal, vec3 lightDir, vec3 reflectDir, vec3 eyeDir, float distance)
{
	float attenuation = 1.0 / (1.0 + lightMaterial.atenuation.x + distance * lightMaterial.atenuation.y + distance * distance * lightMaterial.atenuation.z);
	
	float diffuseCoef = max(0.0, dot(surfaceNormal, lightDir));
	float specularCoef = pow(dot(eyeDir, reflectDir), material.shiness);

	return material.ambient * lightMaterial.ambient + (material.diffuse * lightMaterial.emission * diffuseCoef + material.specular * lightMaterial.emission * specularCoef) * attenuation;
}

vec3 calculateColor(HitInfo hitInfo)
{
	Material material;
	if(hitInfo.objectType == TYPE_SPHERE)
		material = spheres[hitInfo.objectid].material;

	vec3 hitPoint = hitInfo.hitPoint;
	vec3 surfaceNormal = hitInfo.surfaceNormal;

	if(length(material.emission) > 0.0)
		return material.emission + material.diffuse;
	vec3 resultColor = vec3(0);

	for(int i = 0; i < sphereCount; i++) 
	{
		Material lightMaterial;
		vec3 lightPosition;
		int lightType;
		int lightIndex;
		if(i < sphereCount) // ????????????????????
		{
			lightIndex = i;
			lightMaterial = spheres[lightIndex].material;
			lightPosition = spheres[lightIndex].position;
			lightType = TYPE_SPHERE; //?????????????????????????????
		}
		else
		{
			//triangles
		}

		vec3 transparency;

		if((hitInfo.objectid != lightIndex || hitInfo.objectType != lightType) && length(lightMaterial.emission) > 0.0)
		{
			vec3 currentColor = vec3(0);

			if (!isShadowed(hitPoint, lightIndex, lightType, transparency))
			{
				vec3 lightDir = lightPosition - hitPoint;
				float distance = length(lightDir);
				lightDir = normalize(lightDir);

				vec3 eyeDir = normalize(origin - hitPoint);
				vec3 reflectDir = vec3(0);
				if(dot(surfaceNormal, lightDir) > 0.0)
					reflectDir = normalize(reflect(surfaceNormal, -lightDir));

				currentColor += phongShading(material, lightMaterial, hitPoint, surfaceNormal, lightDir, reflectDir, eyeDir, distance) * transparency;
			}
			else
			{
				currentColor += lightMaterial.ambient * material.ambient;
			}
		}
		resultColor += currentColor;
	}

	return resultColor;
}

vec3 iterativeRayTrace(Ray ray)
{
	Material gold;
	gold.ambient = vec3(0.25, 0.2, 0.07);
	gold.diffuse = vec3(0.75, 0.6, 0.23);
	gold.reflection = vec3(0.63, 0.56, 0.37);
	gold.specular = vec3(1.0, 1.0, 1.0);
	gold.transparency = vec3(0.0, 0.0, 0.0);
	gold.emission = vec3(0.0, 0.0, 0.0);
	gold.atenuation = vec3(1.0, 1.0, 6.0);
	gold.refractionCoef = 0.0;
	gold.shiness = 150;

	Sphere sphere;
	sphere.position = vec3(0.0, 0.0, 0.0);
	sphere.radius = 0.5;
	//sphere.color = vec3(0.9, 0.3, 0.0);
	sphere.material = gold;
	sphere.objectid = 0;
	sphere.objectType = TYPE_SPHERE;
	spheres[0] = sphere;

	sphere.position = vec3(-1.5, 0.0, 0.0);
	sphere.radius = 0.2;
	//sphere.color = vec3(0.0, 0.3, 0.7);
	sphere.material = gold;
	sphere.objectid = 1;
	sphere.objectType = TYPE_SPHERE;
	spheres[1] = sphere;

	sphere.position = vec3(-0.6, 0.3, 0.0);
	sphere.radius = 0.3;
	//sphere.color = vec3(0.5, 0.8, 0.4);
	sphere.material = gold;
	sphere.objectid = 2;
	sphere.objectType = TYPE_SPHERE;
	spheres[2] = sphere;

	int numberOfNodes = 1, currentNodeIndex = 0;

	rayNode[currentNodeIndex].ray = ray;
    rayNode[currentNodeIndex].depth = 0;

	while(currentNodeIndex < numberOfNodes)
	{
		rayNode[currentNodeIndex].diffuseColor = vec3(0);
		rayNode[currentNodeIndex].reflectionColor = vec3(0);
		rayNode[currentNodeIndex].refractionColor = vec3(0);

		HitInfo hitInfo;
		hitInfo.hitDetected = false;
		//sphereIntersect(ray, spheres[0], hitInfo);
		//sphereIntersect(ray, spheres[1], hitInfo);
		//sphereIntersect(ray, spheres[2], hitInfo);
		for(int i = 0; i < sphereCount; i++)
			sphereIntersect(ray, spheres[i], hitInfo);

		if(hitInfo.hitDetected)
		{
			//float coeff = (dot(ray.direction, hitInfo.surfaceNormal) * dot(ray.direction, hitInfo.surfaceNormal)) / (dot(ray.direction, ray.direction) * dot(hitInfo.surfaceNormal, hitInfo.surfaceNormal));
			
			//rayNode[currentNodeIndex].color = hitInfo.color * coeff;

			Material material;
			switch(hitInfo.objectType)
			{
			case TYPE_SPHERE : material = spheres[hitInfo.objectid].material; break;
			}

			rayNode[currentNodeIndex].specular = material.specular;
			rayNode[currentNodeIndex].reflection = material.reflection;
			rayNode[currentNodeIndex].refraction = material.transparency;

			if(length(material.reflection) > 0.0 && rayNode[currentNodeIndex].depth < Max_Depth)
			{
				vec3 reflectionDir = normalize(reflect(rayNode[currentNodeIndex].ray.direction, hitInfo.surfaceNormal));
				vec3 offset = reflectionDir * 0.01;
				rayNode[numberOfNodes].ray = Ray(hitInfo.hitPoint + offset, reflectionDir, TYPE_REFLECTION);
				rayNode[numberOfNodes].parentIndex = currentNodeIndex;
				rayNode[numberOfNodes].depth = rayNode[currentNodeIndex].depth + 1;
				numberOfNodes++;
			}

			if(length(material.transparency) > 0.0 && rayNode[currentNodeIndex].depth < Max_Depth)
			{
				vec3 refractionDir = normalize(refract(rayNode[currentNodeIndex].ray.direction, hitInfo.surfaceNormal, material.refractionCoef));
				vec3 offset = refractionDir * 0.01;
				rayNode[numberOfNodes].ray = Ray(hitInfo.hitPoint + offset, refractionDir, TYPE_TRANSPARENCY);
				rayNode[numberOfNodes].parentIndex = currentNodeIndex;
				rayNode[numberOfNodes].depth = rayNode[currentNodeIndex].depth + 1;
				numberOfNodes++;
			}

			if(length(material.ambient) > 0.0 || length(material.diffuse) > 0.0 || length(material.specular) > 0.0 || rayNode[currentNodeIndex].depth >= Max_Depth)
			{
				rayNode[currentNodeIndex].diffuseColor = calculateColor(hitInfo);
			}
		}
		else
		{
			break;
			//rayNode[currentNodeIndex].color = vec3(0.0, 0.0, 0.0);
		}

		for(int i = currentNodeIndex - 1; i > 0; i--)
		{
			vec3 nodeColor = rayNode[i].diffuseColor + rayNode[i].reflectionColor * rayNode[i].reflection + rayNode[i].refractionColor * rayNode[i].refraction;
			if(rayNode[i].ray.type == TYPE_REFLECTION)
				rayNode[rayNode[i].parentIndex].reflectionColor = nodeColor;
			else if(rayNode[i].ray.type == TYPE_TRANSPARENCY)
				rayNode[rayNode[i].parentIndex].refractionColor = nodeColor;
		}

		currentNodeIndex++;
	}

	//return rayNode[0].color;
	return clamp(rayNode[0].diffuseColor + rayNode[0].reflectionColor * rayNode[0].reflection + rayNode[0].refractionColor * rayNode[0].refraction, vec3(0), vec3(1));
}

void main()
{
	Ray ray = Ray(origin, direction, TYPE_DIFFUSE);
	outputColor = vec4(iterativeRayTrace(ray), 1.0);
}
